import * as THREE from 'three';
import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
import { OBJLoader } from 'three/addons/loaders/OBJLoader.js';
import { STLLoader } from 'three/addons/loaders/STLLoader.js';
import { EffectComposer } from 'three/addons/postprocessing/EffectComposer.js';
import { RenderPass } from 'three/addons/postprocessing/RenderPass.js';
import { UnrealBloomPass } from 'three/addons/postprocessing/UnrealBloomPass.js';
import { Rhino3dmLoader } from 'three/addons/loaders/3DMLoader.js';
import * as TWEEN from './lib/tween/tween.module.js';

// Initialize Three.js scene
let scene, camera, renderer, controls;
let models = []; // Array to store multiple models
let loadedMeshes = []; // Array to track all meshes for disposal
let groundPlane = null;
let selectedObject = null;
let ambientLight, directionalLight;
let isDarkBackground = false;
let isTurntableActive = false;
let turntableClock = new THREE.Clock();
let turntableSpeed = 0.5; // radians per second
let composer;
let bloomPass;
let rhino = null; // Global rhino3dm instance
let animationId = null; // For tracking animation frames
let currentMaterial = 'gold'; // Default material for new models

// Function to check if rhino3dm is loaded
function isRhino3dmLoaded() {
    // Check for the rhino3dm global variable
    return typeof rhino3dm !== 'undefined';
}

// Debug function to log available rhino3dm classes
function debugRhino3dm() {
    if (!isRhino3dmLoaded()) {
        console.error('Rhino3dm is not loaded yet');
        return;
    }
    console.log('Rhino3dm loaded:', rhino);
    
    // Check major classes
    const classesToCheck = [
        'File3dm', 'Mesh', 'Brep', 'BrepFace', 'Point3d', 'Curve', 'NurbsCurve',
        'Surface', 'ObjectType', 'MeshType'
    ];
    
    console.log('Available Rhino3dm classes:');
    classesToCheck.forEach(className => {
        console.log(`- ${className}: ${rhino[className] ? 'Available' : 'Not available'}`);
        if (rhino[className]) {
            console.log(`  typeof: ${typeof rhino[className]}`);
        }
    });
    
    if (rhino.Mesh) {
        const meshMethods = [
            'createFromBox', 'createFromSphere', 'createFromClosedPolyline', 
            'createFromBrep', 'vertices', 'faces', 'normals', 'colors'
        ];
        
        console.log('Mesh methods:');
        meshMethods.forEach(method => {
            let available = false;
            try {
                available = typeof rhino.Mesh[method] === 'function' ||
                           (rhino.Mesh.prototype && typeof rhino.Mesh.prototype[method] === 'function');
            } catch (e) {
                available = false;
            }
            console.log(`- ${method}: ${available ? 'Available' : 'Not available'}`);
        });
    }
    
    if (rhino.Brep) {
        const brepMethods = [
            'faces', 'createFromMesh', 'createFromBox', 'createFromCylinder',
            'createFromSphere', 'createFromSurface'
        ];
        
        console.log('Brep methods:');
        brepMethods.forEach(method => {
            let available = false;
            try {
                available = typeof rhino.Brep[method] === 'function' ||
                           (rhino.Brep.prototype && typeof rhino.Brep.prototype[method] === 'function');
            } catch (e) {
                available = false;
            }
            console.log(`- ${method}: ${available ? 'Available' : 'Not available'}`);
        });
    }
    
    if (rhino.ObjectType) {
        console.log('ObjectType values:');
        for (const key in rhino.ObjectType) {
            console.log(`- ${key}: ${rhino.ObjectType[key]}`);
        }
    }
}

// Function to wait for rhino3dm to load with better error handling
async function initRhino3dm() {
    if (rhino !== null) {
        console.log('rhino3dm already initialized');
        return true;
    }
    
    try {
        console.log('Initializing rhino3dm...');
        
        // Check if rhino3dm is loaded
        if (!isRhino3dmLoaded()) {
            console.error('rhino3dm.js is not loaded');
            alert('Error: rhino3dm.js library not loaded. Please refresh the page and try again.');
            return false;
        }
        
        // Initialize rhino3dm
        rhino = await rhino3dm();
        console.log('rhino3dm initialized successfully');
        
        return true;
    } catch (error) {
        console.error('Failed to initialize rhino3dm:', error);
        alert('Failed to initialize rhino3dm. Please refresh the page and try again.');
        return false;
    }
}

// Show loading indicator
function showLoadingIndicator() {
    const loadingIndicator = document.getElementById('loading-indicator');
    if (loadingIndicator) {
        loadingIndicator.style.display = 'flex';  // Changed to flex for better centering
    }
}

// Hide loading indicator
function hideLoadingIndicator() {
    const loadingIndicator = document.getElementById('loading-indicator');
    if (loadingIndicator) {
        loadingIndicator.style.display = 'none';
    }
}

// Show frontpage
function showFrontpage() {
    const frontpage = document.getElementById('frontpage');
    const dropZone = document.getElementById('drop-zone');
    const container = document.querySelector('.container');
    
    if (frontpage) {
        frontpage.style.display = 'flex';
        console.log('Showing frontpage');
    }
    
    if (dropZone) {
        dropZone.style.display = 'none';
    }
    
    if (container) {
        container.style.display = 'none';
    }
}

// Hide frontpage with improved visibility management
function hideFrontpage() {
    const frontpage = document.getElementById('frontpage');
    const dropZone = document.getElementById('drop-zone');
    const container = document.querySelector('.container');
    const viewerContainer = document.getElementById('viewer-container');
    
    if (frontpage) {
        frontpage.style.display = 'none';
        console.log('Hiding frontpage');
    }
    
    // Show the main container first
    if (container) {
        container.style.display = 'block';
    }
    
    // Then show the drop zone for file selection
    if (dropZone) {
        dropZone.style.display = 'flex';
    }

    // Ensure viewer is visible
    if (viewerContainer) {
        viewerContainer.style.display = 'block';
    }
    
    // Force a resize event to ensure proper rendering
    window.dispatchEvent(new Event('resize'));
    
    console.log('Front page hidden, viewer ready');
}

// Initialize the application
async function initializeApp() {
    console.log('Initializing application...');
    
    try {
        // Wait to make sure rhino3dm is available FIRST
        await waitForRhino3dm();
        
        // THEN initialize Three.js scene
        await init();
        
        // Set up event listeners AFTER the scene is initialized
        setupEventListeners();
        
        // Get UI elements
        const frontpage = document.getElementById('frontpage');
        const container = document.querySelector('.container');
        const dropZone = document.getElementById('drop-zone');
        const controlsPanel = document.querySelector('.controls-panel');
        const modelList = document.querySelector('.model-list');
        
        // Log UI state
        console.log('App initialized successfully');
        console.log('UI state after initialization:');
        console.log('- Frontpage visible:', frontpage.style.display);
        console.log('- Container visible:', container.style.display);
        console.log('- Drop zone visible:', dropZone.style.display);
        console.log('- Controls panel ready:', controlsPanel.style.display);
        console.log('- Model list ready:', modelList.style.display);
        
        // Start the animation loop ONLY ONCE at the end of initialization
        animate();
    } catch (error) {
        console.error('Error initializing app:', error);
        alert('Error initializing the application: ' + error.message);
    }
}

// Wait for rhino3dm to be available
async function waitForRhino3dm(maxAttempts = 10, delay = 500) {
    console.log('Waiting for rhino3dm to be available...');
    
    // First check if it's already available
    if (isRhino3dmLoaded()) {
        console.log('rhino3dm is already available');
        return true;
    }
    
    // Wait for a set number of attempts
    for (let attempt = 0; attempt < maxAttempts; attempt++) {
        await new Promise(resolve => setTimeout(resolve, delay));
        
        if (isRhino3dmLoaded()) {
            console.log(`rhino3dm became available after ${attempt + 1} attempts`);
            return true;
        }
        
        console.log(`Waiting for rhino3dm (attempt ${attempt + 1}/${maxAttempts})...`);
    }
    
    // If we get here, rhino3dm isn't available after all attempts
    console.warn(`rhino3dm not available after ${maxAttempts} attempts`);
    
    // Try to initialize it ourselves as a last resort
    return await initRhino3dm();
}

// Gold material presets
const materialPresets = {
    'gold': new THREE.MeshPhysicalMaterial({
        color: 0xFFD700,  // Brighter yellow gold
        metalness: 0.85,  // Slightly reduced for better rendering
        roughness: 0.1,   // Less rough for more shine
        reflectivity: 1.0,
        clearcoat: 0.5,   // More clearcoat for shine
        clearcoatRoughness: 0.1,
        envMapIntensity: 1.5, // Increased for brighter reflections
        side: THREE.DoubleSide
    }),
    'rose-gold': new THREE.MeshPhysicalMaterial({
        color: 0xE0A080,
        metalness: 0.85,
        roughness: 0.1,
        reflectivity: 1.0,
        clearcoat: 0.5,
        clearcoatRoughness: 0.1,
        envMapIntensity: 1.5,
        side: THREE.DoubleSide
    }),
    'white-gold': new THREE.MeshPhysicalMaterial({
        color: 0xF0F0F0,
        metalness: 0.85,
        roughness: 0.1,
        reflectivity: 1.0,
        clearcoat: 0.5,
        clearcoatRoughness: 0.1,
        envMapIntensity: 1.5,
        side: THREE.DoubleSide
    }),
    'fast-gold': new THREE.MeshStandardMaterial({
        color: 0xFFD700,  // Brighter yellow gold
        metalness: 0.8,
        roughness: 0.2,
        side: THREE.DoubleSide
    }),
    'fast-rose-gold': new THREE.MeshStandardMaterial({
        color: 0xE0A080,
        metalness: 0.8,
        roughness: 0.2,
        side: THREE.DoubleSide
    }),
    'fast-white-gold': new THREE.MeshStandardMaterial({
        color: 0xF0F0F0,
        metalness: 0.8,
        roughness: 0.2,
        side: THREE.DoubleSide
    })
};

// Update outline materials
const outlineMaterials = {
    'gold': new THREE.MeshBasicMaterial({
        color: 0x000000,
        side: THREE.BackSide
    }),
    'rose-gold': new THREE.MeshBasicMaterial({
        color: 0x000000,
        side: THREE.BackSide
    }),
    'white-gold': new THREE.MeshBasicMaterial({
        color: 0x000000,
        side: THREE.BackSide
    }),
    'fast-gold': new THREE.MeshBasicMaterial({
        color: 0x000000,
        side: THREE.BackSide
    }),
    'fast-rose-gold': new THREE.MeshBasicMaterial({
        color: 0x000000,
        side: THREE.BackSide
    }),
    'fast-white-gold': new THREE.MeshBasicMaterial({
        color: 0x000000,
        side: THREE.BackSide
    })
};

// Function to clear the scene
function ClearScene() {
  loadedMeshes.forEach((mesh) => {
    scene.remove(mesh);
    if (mesh.geometry) mesh.geometry.dispose();
    if (mesh.material) {
      if (Array.isArray(mesh.material)) {
        mesh.material.forEach(mat => mat.dispose());
      } else {
        mesh.material.dispose();
      }
    }
  });
  loadedMeshes = [];
  models = [];
  selectedObject = null;
  console.log("Scene cleared");
}

// Function to add a model to the scene
function AddModelToScene(mesh) {
  scene.add(mesh);
  loadedMeshes.push(mesh);
  console.log("Mesh added:", mesh.name || "Unnamed");
}

// Initialize the scene
async function init() {
    // Create scene with darker background
    scene = new THREE.Scene();
    scene.background = new THREE.Color(0xe8e8e8); // Light gray for better contrast with gold
    
    // Setup camera
    camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);
    camera.position.set(5, 5, 5);
    camera.lookAt(0, 0, 0);

    // Setup renderer with improved exposure
    renderer = new THREE.WebGLRenderer({ 
        antialias: true,
        powerPreference: "high-performance",
        preserveDrawingBuffer: true // Needed for screenshots
    });
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
    renderer.shadowMap.enabled = true;
    renderer.shadowMap.type = THREE.PCFSoftShadowMap;
    renderer.outputColorSpace = THREE.SRGBColorSpace;
    renderer.toneMapping = THREE.ACESFilmicToneMapping;
    renderer.toneMappingExposure = 1.2; // Increased exposure for brighter display
    document.getElementById('viewer-container').appendChild(renderer.domElement);

    // Initialize post-processing with reduced bloom
    composer = new EffectComposer(renderer);
    const renderPass = new RenderPass(scene, camera);
    composer.addPass(renderPass);
    
    // Add bloom effect with subtle settings for jewelry
    bloomPass = new UnrealBloomPass(
        new THREE.Vector2(window.innerWidth, window.innerHeight),
        0.2,   // Increased strength for more glow
        0.5,   // radius
        0.8    // Lower threshold to bloom more parts
    );
    composer.addPass(bloomPass);
    
    // Setup lights
    setupLights();
    
    // Setup controls
    setupControls();
    
    // Create a jewelry-specific environment map
    const envMap = createJewelryEnvironmentMap(renderer);
    scene.environment = envMap;
    
    // Update all material presets with the environment map
    Object.values(materialPresets).forEach(material => {
        if (material.envMap !== undefined) {
            material.envMap = envMap;
            material.needsUpdate = true;
        }
    });
    
    // Add floor grid - hidden by default
    const gridHelper = new THREE.GridHelper(20, 20);
    gridHelper.visible = false;
    scene.add(gridHelper);
    
    // Create a ground plane
    const groundGeometry = new THREE.PlaneGeometry(20, 20);
    const groundMaterial = new THREE.MeshStandardMaterial({
        color: 0xffffff,
        roughness: 0.8,
        metalness: 0.2,
        side: THREE.DoubleSide
    });
    groundPlane = new THREE.Mesh(groundGeometry, groundMaterial);
    groundPlane.rotation.x = Math.PI / 2; // Rotate to be horizontal
    groundPlane.position.y = 0; // Position at y=0
    groundPlane.receiveShadow = true;
    scene.add(groundPlane);

    // Note: setupEventListeners() and animate() are called in initializeApp()
    // to avoid duplicate initialization
}

// Update the setupEventListeners function to properly handle file selection
function setupEventListeners() {
    console.log('Setting up event listeners...');
    
    // Start viewing button on frontpage
    const startViewingBtn = document.getElementById('start-viewing');
    if (startViewingBtn) {
        startViewingBtn.addEventListener('click', () => {
            console.log('Start viewing button clicked');
            
            // Hide frontpage and show other UI components
            hideFrontpage();
            
            // Force show the drop zone immediately
    const dropZone = document.getElementById('drop-zone');
    if (dropZone) {
                dropZone.style.display = 'flex';
            }
            
            // Make sure container is visible too
            const container = document.querySelector('.container');
            if (container) {
                container.style.display = 'block';
            }
        });
    } else {
        console.error('Start viewing button not found!');
    }
    
    // Drop zone select files button
    const selectFilesBtn = document.getElementById('select-files');
    if (selectFilesBtn) {
        selectFilesBtn.addEventListener('click', () => {
            console.log('Select files button clicked');
            
            // Force immediate UI changes before file dialog opens
            const frontpage = document.getElementById('frontpage');
            if (frontpage) {
                frontpage.style.display = 'none';
            }
            
            const container = document.querySelector('.container');
            if (container) {
                container.style.display = 'block';
            }
            
            document.getElementById('file-input').click();
        });
    } else {
        console.error('Select files button not found!');
    }

    // File input change handler
    const fileInput = document.getElementById('file-input');
    if (fileInput) {
        fileInput.addEventListener('change', (event) => {
            const files = event.target.files;
            if (files && files.length > 0) {
                // Force hide dropzone here to ensure UI is consistent
                const dropZone = document.getElementById('drop-zone');
                if (dropZone) {
                    dropZone.style.display = 'none';
                }
                
                // Make sure container is visible
                const container = document.querySelector('.container');
                if (container) {
                    container.style.display = 'block';
                }
                
                handleFiles(files);
                // Reset the input to allow selecting the same file again
                event.target.value = '';
            }
        });
    } else {
        console.error('File input not found!');
    }

    // Drop zone handlers
    const dropZone = document.getElementById('drop-zone');
    if (dropZone) {
        dropZone.addEventListener('dragover', (event) => {
            event.preventDefault();
            event.stopPropagation();
            dropZone.classList.add('dragover');
        });

        dropZone.addEventListener('dragleave', (event) => {
            event.preventDefault();
            event.stopPropagation();
            dropZone.classList.remove('dragover');
        });

        dropZone.addEventListener('drop', (event) => {
            event.preventDefault();
            event.stopPropagation();
            dropZone.classList.remove('dragover');
            const files = event.dataTransfer.files;
            if (files && files.length > 0) {
                handleFiles(files);
            }
        });
    } else {
        console.error('Drop zone not found!');
    }
    
    // Material selection
    const materialSelect = document.getElementById('material-select');
    if (materialSelect) {
        materialSelect.addEventListener('change', () => {
            for (const model of models) {
                if (model.selected) {
                    applyMaterialToModel(models.indexOf(model), materialSelect.value);
                }
            }
        });
    } else {
        console.error('Material select not found!');
    }

    // Control buttons - verify each exists before adding listener
    const centerBtn = document.getElementById('center-model');
    if (centerBtn) {
        centerBtn.addEventListener('click', centerSelectedModel);
        console.log('Center model button initialized');
    } else {
        console.error('Center model button not found!');
    }

    const turntableBtn = document.getElementById('toggle-turntable');
    if (turntableBtn) {
        turntableBtn.addEventListener('click', toggleTurntable);
        console.log('Turntable button initialized');
    } else {
        console.error('Turntable button not found!');
    }

    const floorBtn = document.getElementById('toggle-floor');
    if (floorBtn) {
        floorBtn.addEventListener('click', toggleFloor);
        console.log('Floor button initialized');
    } else {
        console.error('Floor button not found!');
    }

    const backgroundBtn = document.getElementById('toggle-background');
    if (backgroundBtn) {
        backgroundBtn.addEventListener('click', toggleBackground);
        console.log('Background button initialized');
    } else {
        console.error('Background button not found!');
    }
    
    const resetCameraBtn = document.getElementById('reset-camera');
    if (resetCameraBtn) {
        resetCameraBtn.addEventListener('click', resetCamera);
        console.log('Reset camera button initialized');
    } else {
        console.error('Reset camera button not found!');
    }
    
    // Set up sliders for controlling lights
    const ambientLightSlider = document.getElementById('ambient-light');
    if (ambientLightSlider) {
        ambientLightSlider.addEventListener('input', handleAmbientLightChange);
        console.log('Ambient light slider initialized');
    } else {
        console.error('Ambient light slider not found!');
    }
    
    const directionalLightSlider = document.getElementById('directional-light');
    if (directionalLightSlider) {
        directionalLightSlider.addEventListener('input', handleDirectionalLightChange);
        console.log('Directional light slider initialized');
    } else {
        console.error('Directional light slider not found!');
    }

    // Click handling for object selection
    const rendererElement = renderer ? renderer.domElement : null;
    if (rendererElement) {
        rendererElement.addEventListener('click', handleClick);
        console.log('Renderer click handler initialized');
    } else {
        console.error('Renderer DOM element not found or not initialized yet!');
    }
    
    console.log('All event listeners set up successfully');
}

// Get appropriate loader for file type
function getLoaderForFile(filename) {
    const extension = filename.split('.').pop().toLowerCase();
    console.log('Loading file with extension:', extension);
    switch (extension) {
        case 'stl':
            return new STLLoader();
        case 'obj':
            console.log('Creating OBJLoader for OBJ file');
            const objLoader = new OBJLoader();
            // Configure the loader to use the local material search path
            objLoader.setPath('./');
            // Important: disable resource verification to avoid CSP issues
            objLoader.setResourcePath('./');
            objLoader.setCrossOrigin('anonymous');
            return objLoader;
        case 'gltf':
        case 'glb':
            return new GLTFLoader();
        case '3dm':
            console.log('Initializing Rhino3dmLoader');
            const loader = new Rhino3dmLoader();
            // Use the local library path
            loader.setLibraryPath('lib/rhino3dm/');
            return loader;
        default:
            console.log('No loader found for extension:', extension);
            return null;
    }
}

// Get loader for file path or object
function getLoaderForPath(path) {
    // If path is an object (typically a 3D model object), return a dummy loader
    if (typeof path === 'object') {
        // Create a simple loader that just returns the object
        return {
            load: (url, onLoad) => {
                onLoad(path);
            }
        };
    }
    
    // For string paths, use the existing getLoaderForFile function
    return getLoaderForFile(typeof path === 'string' ? path : path.name);
}

// Update the processOtherFile function to fix Content Security Policy issues when loading OBJ files
async function processOtherFile(file) {
    try {
        const loader = getLoaderForFile(file.name);
        if (!loader) {
            throw new Error(`Unsupported file format: ${file.name.split('.').pop()}`);
        }

        // Create a blob URL instead of using data URL
        const objectUrl = URL.createObjectURL(file);
        
        // Special handling for OBJ files
        const extension = file.name.split('.').pop().toLowerCase();
        if (extension === 'obj') {
            console.log(`Processing OBJ file: ${file.name}`);
            // For OBJ files we need to read the text content and pass it to the loader directly
            try {
                const fileContent = await readFileAsText(file);
                
                return new Promise((resolve, reject) => {
                    try {
                        // Parse OBJ content directly
                        const object = loader.parse(fileContent);
                        console.log(`[processOtherFile] Successfully parsed OBJ content for ${file.name}`);
                        resolve(object);
                    } catch (error) {
                        console.error(`Error parsing OBJ content: ${error.message || 'Unknown error'}`);
                        reject(new Error(`Failed to parse ${file.name}: ${error.message || 'Unknown error'}`));
                    }
                });
            } catch (error) {
                console.error(`Error reading OBJ file: ${error.message || 'Unknown error'}`);
                throw new Error(`Failed to read ${file.name}: ${error.message || 'Unknown error'}`);
            }
        }
        
        // For other file types, use the blob URL loading approach
        return new Promise((resolve, reject) => {
            try {
                loader.load(
                    objectUrl, 
                    (object) => {
                        console.log(`[processOtherFile] Successfully loaded ${file.name}`);
                        // Revoke the blob URL after successful loading
                        URL.revokeObjectURL(objectUrl);
                        resolve(object);
                    },
                    (progress) => {
                        console.log(`Loading ${file.name}: ${Math.round(progress.loaded / progress.total * 100)}%`);
                    },
                    (error) => {
                        // Revoke the blob URL on error as well
                        URL.revokeObjectURL(objectUrl);
                        reject(new Error(`Failed to load ${file.name}: ${error.message || 'Unknown error'}`));
                    }
                );
            } catch (error) {
                // Make sure to revoke the URL in case of exceptions
                URL.revokeObjectURL(objectUrl);
                reject(new Error(`Failed to process ${file.name}: ${error.message || 'Unknown error'}`));
            }
        });
    } catch (error) {
        console.error(`Error processing ${file.name}: ${error.message}`);
        throw error;
    }
}

// Helper function to read a file as text
function readFileAsText(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = (e) => {
            resolve(e.target.result);
        };
        reader.onerror = (e) => {
            reject(new Error(`Error reading file: ${e.target.error}`));
        };
        reader.readAsText(file);
    });
}

// Helper function to read a file as ArrayBuffer
function readFileAsArrayBuffer(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = (event) => resolve(event.target.result);
        reader.onerror = (error) => reject(error);
        reader.readAsArrayBuffer(file);
    });
}

// Update meshing parameters for better quality
function getMeshingParameters(rhino) {
    const mp = new rhino.MeshingParameters();
    mp.gridMinCount = 20;      // Minimal number of grid quads in each direction (default: 16)
    mp.gridMaxCount = 100;     // Maximal number of grid quads in each direction (default: 64)
    mp.gridAngle = 0;          // Angle in degrees (default: 20)
    mp.gridAspectRatio = 1.0;  // The maximum allowed aspect ratio of grid quads (default: 6.0)
    mp.refineGrid = true;      // Whether to refine the grid to improve mesh quality
    mp.simplePlanes = false;   // Don't simplify planar areas to avoid triangulation issues
    mp.smoothNormals = true;   // Calculate smooth normals
    mp.normalAngle = 5;        // Normal angle between polygon faces to smooth (default: 20 degrees)
    mp.minimumEdgeLength = 0.0001;
    mp.maximumEdgeLength = 0.1;
    mp.texture3d = true;       // Generate 3d texture coordinates (default: false)
    mp.jaggedSeams = false;    // Optimize for smoothing across edges (default: false)
    mp.tolerance = 0.005;      // Tolerance setting to use for meshing (default: 0.01)
    return mp;
}

// Create mesh with improved material settings
function createMeshMaterial(color = 0xffd700) {
    return new THREE.MeshPhysicalMaterial({
        color: color,
        metalness: 0.8,
        roughness: 0.15,
        clearcoat: 0.5,
        clearcoatRoughness: 0.1,
        reflectivity: 0.9,
        envMapIntensity: 1.0,
        side: THREE.DoubleSide,
        flatShading: false,
        vertexColors: false,
        wireframe: false,
        precision: 'highp'
    });
}

// Update turntable animation
function updateTurntable() {
    if (isTurntableActive && selectedObject) {
        const delta = turntableClock.getDelta();
        const rotationSpeed = turntableSpeed * delta;
        
        // Apply smooth rotation
        selectedObject.rotation.y += rotationSpeed;
        
        // Reset rotation after full circle
        if (selectedObject.rotation.y >= Math.PI * 2) {
            selectedObject.rotation.y = 0;
        }
        
        // Request next frame
        requestAnimationFrame(updateTurntable);
    }
}

// Toggle turntable animation with improved handling
function toggleTurntable() {
    console.log("Toggle turntable called, selectedObject:", selectedObject);
    
    if (!selectedObject) {
        console.warn('No object selected for turntable animation');
        alert('Please select an object first by clicking on it');
        return;
    }

    isTurntableActive = !isTurntableActive;
    console.log("Turntable active:", isTurntableActive);
    
    // Update button state
    const toggleTurntableBtn = document.getElementById('toggle-turntable');
    if (toggleTurntableBtn) {
        toggleTurntableBtn.classList.toggle('active', isTurntableActive);
    }
    
    if (isTurntableActive) {
        console.log('Starting turntable animation');
        controls.enableRotate = false; // Disable manual rotation during turntable
        selectedObject.userData.initialRotation = selectedObject.rotation.y;
        
        // Reset and start the clock
        turntableClock.stop();
        turntableClock.start();
    } else {
        console.log('Stopping turntable animation');
        turntableClock.stop();
        controls.enableRotate = true; // Re-enable manual rotation
    }
}

// Improved handleFiles function with single path for loading 3DM files
async function handleFiles(files) {
    if (!files || files.length === 0) {
        console.log('No files selected');
        return;
    }

    try {
        showLoadingIndicator();
        console.log(`Processing ${files.length} file(s)`);
        
        // Force UI state before any processing
        const frontpage = document.getElementById('frontpage');
        if (frontpage) {
            frontpage.style.display = 'none';
        }
        
        const dropZone = document.getElementById('drop-zone');
        if (dropZone) {
            dropZone.style.display = 'none';
        }
        
        const container = document.querySelector('.container');
        if (container) {
            container.style.display = 'block';
        }
        
        // Ensure controls are visible
        const controlsPanel = document.querySelector('.controls-panel');
        if (controlsPanel) {
            controlsPanel.style.display = 'block';
        }
        
        const modelList = document.querySelector('.model-list');
        if (modelList) {
            modelList.style.display = 'block';
        }
        
        const viewerContainer = document.getElementById('viewer-container');
        if (viewerContainer) {
            viewerContainer.style.display = 'block';
        }

        // Track newly added models for selection
        const addedModelIndices = [];

        // Process each file
        for (let i = 0; i < files.length; i++) {
            const file = files[i];
            const extension = file.name.split('.').pop().toLowerCase();
            
            console.log(`Processing file: ${file.name} (${extension})`);
            
            try {
                // Check if we already have this file loaded
                const alreadyLoaded = models.some(model => model.name === file.name);
                if (alreadyLoaded) {
                    console.log(`File ${file.name} is already loaded, skipping`);
                    continue;
                }
                
                let object;
                
                // Read the file as ArrayBuffer
                const fileBuffer = await readFileAsArrayBuffer(file);
                
                // Process the file based on its extension
                if (extension === '3dm') {
                    try {
                        // Process 3DM file
                        const loadedMeshes = await process3DMFile(fileBuffer);
                        if (loadedMeshes && loadedMeshes.length > 0) {
                            // Create a group to hold all meshes
                            object = new THREE.Group();
                            object.name = file.name;
                            
                            // Add all loaded meshes to the group
                            loadedMeshes.forEach(mesh => {
                                object.add(mesh);
                            });
                            
                            console.log(`Loaded ${loadedMeshes.length} objects from ${file.name}`);
                        }
                    } catch (error) {
                        console.error(`Error processing 3DM file: ${error.message}`);
                        alert(`Failed to process ${file.name}: ${error.message}`);
                        continue;  // Skip to the next file
                    }
                } else {
                    try {
                        // For other file types
                        object = await processOtherFile(file);
                    } catch (error) {
                        console.error(`Error processing file: ${error.message}`);
                        alert(`Failed to process ${file.name}: ${error.message}`);
                        continue;  // Skip to the next file
                    }
                }
                
                if (object) {
                    // Add the object to the scene
                    console.log(`Adding ${file.name} to model list and scene`);
                    const modelIndex = loadModel(object, file.name);
                    
                    if (modelIndex >= 0) {
                        addedModelIndices.push(modelIndex);
                        console.log(`Successfully added ${file.name} to scene with index ${modelIndex}`);
                    }
                }
            } catch (error) {
                console.error(`Failed to process ${file.name}:`, error);
                alert(`Failed to process ${file.name}: ${error.message || 'Unknown error'}`);
            }
        }
        
        // Update the model list in the sidebar
        updateModelListInSidebar();
        
        // Auto-select the first model that was added (if any)
        if (addedModelIndices.length > 0) {
            selectModel(addedModelIndices[0]);
        }
        
        // After all models are loaded, center them in the scene
        if (models.length > 0) {
            centerModel();
            console.log('Centered all models in scene');
        }
        
        // Force a resize event to ensure proper rendering
        window.dispatchEvent(new Event('resize'));
        
    } catch (error) {
        console.error('Error handling files:', error);
        alert(`Failed to process files: ${error.message || 'Unknown error'}`);
    } finally {
        hideLoadingIndicator();
    }
}

function toggleFloor() {
    if (groundPlane) {
        groundPlane.visible = !groundPlane.visible;
        const toggleFloorBtn = document.getElementById('toggle-floor');
        if (toggleFloorBtn) {
            toggleFloorBtn.classList.toggle('active');
        }
    }
}

function toggleBackground() {
    isDarkBackground = !isDarkBackground;
    scene.background = new THREE.Color(isDarkBackground ? 0x000000 : 0xf0f0f0);
    
    // Update button state
    const toggleBackgroundBtn = document.getElementById('toggle-background');
    if (toggleBackgroundBtn) {
        toggleBackgroundBtn.classList.toggle('active', isDarkBackground);
    }
}

function toggleSidebar() {
    const controlsPanel = document.querySelector('.controls-panel');
    if (controlsPanel) {
        controlsPanel.classList.toggle('hidden');
    }
}

// Reset camera to default position
function resetCamera() {
    // If there's a selected object, center on it first
    if (selectedObject) {
        controls.target.copy(selectedObject.position);
    } else {
        controls.target.set(0, 0, 0);
    }
    
    const startPosition = camera.position.clone();
    const startTarget = controls.target.clone();
    
    // Calculate a good position based on scene content or selected object
    let targetPosition;
    if (selectedObject) {
        // Position camera at an angle to the selected object
        const box = new THREE.Box3().setFromObject(selectedObject);
        const size = box.getSize(new THREE.Vector3()).length();
        const distance = size * 2;
        targetPosition = new THREE.Vector3(
            selectedObject.position.x + distance * 0.8,
            selectedObject.position.y + distance * 0.7,
            selectedObject.position.z + distance * 0.8
        );
    } else {
        // Default position with good viewing angle
        targetPosition = new THREE.Vector3(5, 5, 5);
    }
    
    const duration = 1000;
    const startTime = Date.now();

    // Ensure rotation is enabled
    controls.enableRotate = true;

    function animateCamera() {
        const elapsed = Date.now() - startTime;
        const progress = Math.min(elapsed / duration, 1);
        
        // Ease in-out function for smooth animation
        const easeProgress = progress < 0.5 
            ? 2 * progress * progress 
            : -1 + (4 - 2 * progress) * progress;

        camera.position.lerpVectors(startPosition, targetPosition, easeProgress);
        controls.target.lerpVectors(startTarget, selectedObject ? selectedObject.position : new THREE.Vector3(0, 0, 0), easeProgress);
        controls.update();

        if (progress < 1) {
            requestAnimationFrame(animateCamera);
        }
    }

    animateCamera();
}

// Add keyboard shortcuts handler
function setupKeyboardShortcuts() {
    window.addEventListener('keydown', function(event) {
        // Only process shortcuts if we're not in an input field
        if (event.target.tagName === 'INPUT' || event.target.tagName === 'TEXTAREA') {
            return;
        }
        
        switch(event.key.toLowerCase()) {
            case ' ': // Space key to reset camera
                resetCamera();
                break;
            case 'f': // F key to toggle floor
                toggleFloor();
                break;
            case 'b': // B key to toggle background
                toggleBackground();
                break;
            case 't': // T key to toggle turntable
                toggleTurntable();
                break;
            case 'c': // C key to center model
                centerSelectedModel();
                break;
            case 'z': // Z key to fit selected model to view
                if (selectedObject) {
                    zoomToFit(selectedObject, camera, controls);
                }
                break;
        }
    });
}

// Improved zoom to fit function
function zoomToFit(selectedModels = null, animate = true) {
    const modelsToFit = selectedModels || models;
    
    if (!modelsToFit || modelsToFit.length === 0) {
        console.warn('No models to fit in view');
        return;
    }
    
    // Create a new bounding box encompassing all models to fit
    const box = new THREE.Box3();
    
    // Track whether we've found any valid geometry
    let foundValidGeometry = false;
    
    modelsToFit.forEach(model => {
        if (model.object) {
            // Ensure we have a valid bounding box for the model
            if (!model.boundingBox) {
                // If no bounding box stored, calculate it
                model.boundingBox = new THREE.Box3().setFromObject(model.object);
            }
            
            // Only expand the overall box if the model's box is valid
            if (isValidBoundingBox(model.boundingBox)) {
                box.union(model.boundingBox);
                foundValidGeometry = true;
            }
        }
    });
    
    // If we didn't find any valid geometry, return
    if (!foundValidGeometry) {
        console.warn('No valid geometry found to fit in view');
        return;
    }
    
    // Calculate the center of the box
    const center = new THREE.Vector3();
    box.getCenter(center);
    
    // Calculate the size of the box
    const size = new THREE.Vector3();
    box.getSize(size);
    
    // Log for debugging
    console.log('Zooming to fit box:', {
        center: center,
        size: size
    });
    
    // Get the max dimension of the bounding box
    const maxDim = Math.max(size.x, size.y, size.z);
    
    // Calculate the distance based on the field of view and size
    const fov = camera.fov * (Math.PI / 180);
    
    // Add padding factor to ensure models fit comfortably in view
    const padding = 1.5;
    
    // Calculate the camera distance, ensuring we're not too close
    let distance = Math.max(
        (maxDim * padding) / (2 * Math.tan(fov / 2)),
        5 // Minimum distance to avoid clipping
    );
    
    // Calculate the target position (center of models)
    const targetPosition = center.clone();
    
    // Calculate the new camera position
    // Position the camera to look at the models from a front-top-right perspective
    const offset = new THREE.Vector3(1, 0.7, 1).normalize().multiplyScalar(distance);
    const newPosition = targetPosition.clone().add(offset);
    
    // Set the camera target (controls target)
    if (animate) {
        // Animate the movement
        new TWEEN.Tween(controls.target)
            .to(targetPosition, 1000)
            .easing(TWEEN.Easing.Cubic.Out)
            .start();
            
        // Animate the camera position
        new TWEEN.Tween(camera.position)
            .to(newPosition, 1000)
            .easing(TWEEN.Easing.Cubic.Out)
            .start();
    } else {
        // Set immediately
        controls.target.copy(targetPosition);
        camera.position.copy(newPosition);
        controls.update();
    }
    
    // Reset camera up vector to ensure consistent orientation
    camera.up.set(0, 1, 0);
}

// Load model function that adds a model to the scene without duplicating geometry
function loadModel(modelPath, materialType = null) {
    // Create a progress indicator
    const progressContainer = document.getElementById('progress-container');
    const progressElement = document.getElementById('progress');
    progressContainer.style.display = 'block';
    progressElement.style.width = '0%';
    
    // Check if we already have this model loaded
    const existingModelIndex = models.findIndex(model => model.path === modelPath);
    if (existingModelIndex >= 0) {
        console.log(`Model ${modelPath} already loaded`);
        progressContainer.style.display = 'none';
        return existingModelIndex;
    }
    
    // Determine which material to use, with better fallback handling
    let materialToUse = currentMaterial || 'gold';
    if (materialType && materialPresets[materialType]) {
        materialToUse = materialType;
    } else if (!materialPresets[materialToUse]) {
        materialToUse = 'gold'; // Default fallback
    }
    
    // Create a placeholder for this model
    const modelInfo = {
        path: modelPath,
        name: getFileNameFromPath(modelPath),
        object: null,
        originalPosition: new THREE.Vector3(),
        originalScale: new THREE.Vector3(1, 1, 1),
        boundingBox: null,
        selected: false,
        visible: true,
        material: materialToUse
    };
    
    // Add the model to our models array
    const modelIndex = models.push(modelInfo) - 1;
    
    console.log(`Loading model: ${modelPath} with material: ${materialToUse}`);
    
    // Load the model
    const loader = getLoaderForPath(modelPath);
    loader.load(
        modelPath,
        (object) => {
            // Apply the material to the model
            applyMaterial(object, materialPresets[materialToUse]);
            
            // Add the loaded object to the model info
            modelInfo.object = object;
            
            // Position and scale the model
            if (positionAndScaleModel(object, modelInfo)) {
                // Add the object to the scene
                scene.add(object);
                
                // Create an outline for the object
                modelInfo.outline = createOutline(object, materialToUse);
                if (modelInfo.outline) {
                    scene.add(modelInfo.outline);
                }
                
                // Hide the progress indicator
                progressContainer.style.display = 'none';
                progressElement.style.width = '0%';
                
                // Update UI to reflect the new model
                updateLoadedModelsUI();
                
                // Log and zoom to fit the newly loaded model
                console.log(`Model loaded successfully: ${modelPath}`);
                
                // Force a render to ensure the model is visible
                renderer.render(scene, camera);
                
                // Zoom to fit with animation only if this is our first model
                zoomToFit([modelInfo], models.length === 1);
                
                // Dispatch a model loaded event
                dispatchEvent('modelLoaded', { 
                    modelIndex: modelIndex,
                    model: modelInfo 
                });
            }
        },
        (xhr) => {
            // Update the progress indicator
            if (xhr.lengthComputable) {
                const percentComplete = xhr.loaded / xhr.total * 100;
                progressElement.style.width = percentComplete + '%';
            }
        },
        (error) => {
            console.error(`Error loading model: ${modelPath}`, error);
            progressContainer.style.display = 'none';
            progressElement.style.width = '0%';
            
            // Remove the model from our models array
            models.splice(modelIndex, 1);
            
            // Show an error message
            alert(`Failed to load model: ${modelPath}`);
        }
    );
    
    return modelIndex;
}

// Add helper function to validate a geometry's bounding box
function validateGeometry(geometry) {
    if (!geometry) return false;

    // First check if we need to compute the bounding box
    if (!geometry.boundingBox) {
        geometry.computeBoundingBox();
    }

    // Check if bounding box exists and has valid values
    if (!geometry.boundingBox) return false;

    const min = geometry.boundingBox.min;
    const max = geometry.boundingBox.max;

    // Check for NaN values
    if (isNaN(min.x) || isNaN(min.y) || isNaN(min.z) ||
        isNaN(max.x) || isNaN(max.y) || isNaN(max.z)) {
        return false;
    }

    // Check if bounding sphere needs to be computed
    if (!geometry.boundingSphere) {
        geometry.computeBoundingSphere();
    }

    // Check if bounding sphere exists and has valid values
    if (!geometry.boundingSphere) return false;
    
    // Check for NaN radius
    if (isNaN(geometry.boundingSphere.radius)) {
        return false;
    }

    return true;
}

// Add helper function to fix geometry with invalid bounding boxes
function fixGeometryBounds(geometry) {
    if (!geometry) return;

    // Get position attribute
    const positions = geometry.attributes.position;
    if (!positions) return;

    // Create a valid bounding box and sphere manually
    const validPoints = [];
    const bbox = new THREE.Box3();
    
    // Collect all valid points
    for (let i = 0; i < positions.count; i++) {
        const x = positions.getX(i);
        const y = positions.getY(i);
        const z = positions.getZ(i);
        
        if (!isNaN(x) && !isNaN(y) && !isNaN(z)) {
            const point = new THREE.Vector3(x, y, z);
            validPoints.push(point);
            bbox.expandByPoint(point);
        }
    }
    
    // If no valid points found, create a default tiny box at origin
    if (validPoints.length === 0) {
        bbox.min.set(-0.1, -0.1, -0.1);
        bbox.max.set(0.1, 0.1, 0.1);
    }
    
    geometry.boundingBox = bbox;
    
    // Calculate bounding sphere from bounding box
    const center = new THREE.Vector3();
    bbox.getCenter(center);
    
    // Find the furthest point from center
    let maxRadiusSq = 0;
    for (const point of validPoints) {
        const distSq = center.distanceToSquared(point);
        maxRadiusSq = Math.max(maxRadiusSq, distSq);
    }
    
    // If no valid points were used, set a small default radius
    const radius = validPoints.length > 0 ? Math.sqrt(maxRadiusSq) : 0.1;
    geometry.boundingSphere = new THREE.Sphere(center, radius);
    
    console.log(`Fixed geometry bounds: bbox=(${bbox.min.toArray()}, ${bbox.max.toArray()}), sphere=(${center.toArray()}, ${radius})`);
}

// Update the positionAndScaleModel function to handle geometry issues
function positionAndScaleModel(object, model) {
    try {
        // Ensure the model is properly traversed to calculate accurate bounding box
        const box = new THREE.Box3();
        
        // Use recursive traversal to ensure we include all children in bounding box
        object.traverse(child => {
            if (child.isMesh) {
                // Force geometry to update bounds
                if (child.geometry) {
                    child.geometry.computeBoundingBox();
                    box.expandByObject(child);
                }
            }
        });
        
        // Check if the bounding box is valid (not infinite)
        if (!isValidBoundingBox(box)) {
            console.warn('Invalid bounding box detected, attempting to fix...');
            box.set(
                new THREE.Vector3(-1, -1, -1),
                new THREE.Vector3(1, 1, 1)
            );
        }
        
        // Additional checks and logging for debugging
        console.log('Model bounding box:', {
            min: box.min,
            max: box.max,
            size: box.getSize(new THREE.Vector3())
        });
        
        
        // Calculate center of the bounding box
        const center = new THREE.Vector3();
        box.getCenter(center);
        
        // Calculate the size of the bounding box
        const size = new THREE.Vector3();
        box.getSize(size);
        
        // Calculate the max dimension of the model
        const maxDim = Math.max(size.x, size.y, size.z);
        
        // Set a scale factor based on the size
        let scaleFactor = 1;
        
        // If the model is very small (common with CAD models), scale it up
        if (maxDim < 0.1) {
            scaleFactor = 10 / maxDim; // Scale to approximately 10 units
            console.log(`Model is very small (${maxDim}), scaling up by ${scaleFactor}`);
        }
        // If the model is very large, scale it down
        else if (maxDim > 100) {
            scaleFactor = 50 / maxDim; // Scale to approximately 50 units
            console.log(`Model is very large (${maxDim}), scaling down by ${scaleFactor}`);
        }
        
        // Apply scaling if needed
        if (scaleFactor !== 1) {
            object.scale.set(scaleFactor, scaleFactor, scaleFactor);
            
            // Update the bounding box after scaling
            box.setFromObject(object);
            box.getCenter(center);
            box.getSize(size);
        }
        
        // Center the object at the origin
        object.position.set(-center.x, -center.y, -center.z);
        
        // Store original position and scaling information in the model
        model.originalPosition = center.clone();
        model.originalScale = new THREE.Vector3(scaleFactor, scaleFactor, scaleFactor);
        model.boundingBox = box.clone();
        
        return true;
    } catch (error) {
        console.error('Error positioning and scaling model:', error);
        return false;
    }
}

// Add centerSelectedModel function back
function centerSelectedModel() {
    if (models.length === 0) {
        console.warn('No models available to center');
        return;
    }

    if (selectedObject) {
        // If an object is selected, center on that object
        zoomToFit(selectedObject, camera, controls);
        console.log('Centering selected model');
    } else {
        // Otherwise center on all models
        centerModel();
    }
}

// Add applyMaterial function back
function applyMaterial(mesh, materialType) {
    if (!mesh || !materialPresets[materialType]) return;
    
    const material = materialPresets[materialType].clone();
    
    if (mesh instanceof THREE.Group) {
        mesh.traverse((child) => {
            if (child instanceof THREE.Mesh) {
                child.material = material;
            }
        });
    } else if (mesh instanceof THREE.Mesh) {
        mesh.material = material;
    }
}

// Create outline for a mesh using the outlineMaterials
function createOutline(object) {
    if (!object) return null;
    
    try {
        // Determine material type, defaulting to 'gold'
        let materialType = 'gold';
        
        // Check if the object already has a material with a type
        if (object instanceof THREE.Mesh && object.material && object.material.userData && object.material.userData.materialType) {
            materialType = object.material.userData.materialType;
        }
        
        // Get the outline material or use default
        const outlineMaterial = outlineMaterials[materialType] || outlineMaterials['gold'];
        
        if (object instanceof THREE.Group) {
            // For groups, create a group of outlines
            const outlineGroup = new THREE.Group();
            
            object.traverse((child) => {
                if (child instanceof THREE.Mesh) {
                    const childOutline = createMeshOutline(child, outlineMaterial.clone());
                    if (childOutline) {
                        childOutline.visible = false; // Start with outline hidden
                        outlineGroup.add(childOutline);
                    }
                }
            });
            
            if (outlineGroup.children.length > 0) {
                outlineGroup.userData.isOutline = true;
                object.userData.outline = outlineGroup;
                return outlineGroup;
            }
            
            return null;
        } else if (object instanceof THREE.Mesh) {
            // For individual meshes
            const outline = createMeshOutline(object, outlineMaterial.clone());
            if (outline) {
                outline.visible = false; // Start with outline hidden
                outline.userData.isOutline = true;
                object.userData.outline = outline;
                return outline;
            }
        }
        
        return null;
    } catch (error) {
        console.error('Error creating outline:', error);
        return null;
    }
}

// Helper function to create an outline for a single mesh
function createMeshOutline(mesh, outlineMaterial) {
    if (!mesh || !mesh.geometry) return null;
    
    // Clone the geometry for the outline
    const geometry = mesh.geometry.clone();
    
    // Create the outline mesh
    const outline = new THREE.Mesh(geometry, outlineMaterial);
    
    // Copy the transform from original mesh
    outline.position.copy(mesh.position);
    outline.rotation.copy(mesh.rotation);
    outline.scale.copy(mesh.scale).multiplyScalar(1.05); // Slightly larger scale
    
    // Mark as outline for later identification
    outline.userData.isOutline = true;
    
    return outline;
}

// Add back updateModelListInSidebar function
function updateModelListInSidebar() {
    const modelListElement = document.getElementById('model-list-content');
    if (!modelListElement) {
        console.error('Model list element not found');
        return;
    }
    
    // Clear existing content
    modelListElement.innerHTML = '';
    
    if (models.length === 0) {
        const emptyMessage = document.createElement('div');
        emptyMessage.className = 'empty-model-list';
        emptyMessage.textContent = 'No models loaded. Click "Add Model" to get started.';
        modelListElement.appendChild(emptyMessage);
    } else {
        models.forEach((model, index) => {
            const item = document.createElement('div');
            item.className = `model-item ${model.selected ? 'selected' : ''}`;
            
            const label = document.createElement('label');
            label.className = 'model-label';
            
            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.checked = model.visible;
            checkbox.addEventListener('change', () => toggleModelVisibility(index));
            
            const nameSpan = document.createElement('span');
            nameSpan.textContent = model.name;
            nameSpan.addEventListener('click', () => selectModel(index));
            
            const controlsDiv = document.createElement('div');
            controlsDiv.className = 'model-controls';
            
            // Visibility toggle
            const visibilityBtn = document.createElement('button');
            visibilityBtn.className = 'model-btn visibility-btn';
            visibilityBtn.innerHTML = `<i class="fas fa-eye${model.visible ? '' : '-slash'}"></i>`;
            visibilityBtn.title = model.visible ? 'Hide' : 'Show';
            visibilityBtn.addEventListener('click', () => toggleModelVisibility(index));
            
            // Material options
            const materialBtn = document.createElement('button');
            materialBtn.className = 'model-btn material-btn';
            materialBtn.innerHTML = `<i class="fas fa-palette"></i>`;
            materialBtn.title = 'Change Material';
            materialBtn.addEventListener('click', () => showMaterialDialog(index));
            
            // Delete button
            const deleteBtn = document.createElement('button');
            deleteBtn.className = 'model-btn delete-btn';
            deleteBtn.innerHTML = `<i class="fas fa-trash"></i>`;
            deleteBtn.title = 'Remove Model';
            deleteBtn.addEventListener('click', () => {
                if (confirm(`Are you sure you want to remove "${model.name}"?`)) {
                    removeModel(index);
                }
            });
            
            // Add all buttons to controls
            controlsDiv.appendChild(visibilityBtn);
            controlsDiv.appendChild(materialBtn);
            controlsDiv.appendChild(deleteBtn);
            
            // Assemble the item
            label.appendChild(checkbox);
            label.appendChild(nameSpan);
            item.appendChild(label);
            item.appendChild(controlsDiv);
            modelListElement.appendChild(item);
        });
    }
    
    // Always add "Add More Models" button
    const addMoreBtn = document.createElement('button');
    addMoreBtn.className = 'add-more-models-btn';
    addMoreBtn.innerHTML = '<i class="fas fa-plus"></i> Add More Models';
    addMoreBtn.addEventListener('click', () => {
        document.getElementById('file-input').click();
    });
    
    modelListElement.appendChild(addMoreBtn);
}

// Create a more suitable environment map for jewelry
function createJewelryEnvironmentMap(renderer) {
    const pmremGenerator = new THREE.PMREMGenerator(renderer);
    pmremGenerator.compileEquirectangularShader();
    
    // Create a simple environment with studio-like lighting
    const cubeRenderTarget = pmremGenerator.fromScene(createStudioScene(), 0.04);
    const envMap = cubeRenderTarget.texture;
    
    // Clean up resources
    cubeRenderTarget.dispose();
    pmremGenerator.dispose();
    
    return envMap;
}

// Create a studio-like environment for the reflections
function createStudioScene() {
    const scene = new THREE.Scene();
    
    // Top light
    const topLight = new THREE.DirectionalLight(0xffffff, 1.0);
    topLight.position.set(0, 10, 0);
    scene.add(topLight);
    
    // Front light
    const frontLight = new THREE.DirectionalLight(0xffffff, 0.8);
    frontLight.position.set(0, 0, 10);
    scene.add(frontLight);
    
    // Back light
    const backLight = new THREE.DirectionalLight(0xffffff, 0.3);
    backLight.position.set(0, 0, -10);
    scene.add(backLight);
    
    // Side lights
    const rightLight = new THREE.DirectionalLight(0xffffff, 0.5);
    rightLight.position.set(10, 0, 0);
    scene.add(rightLight);
    
    const leftLight = new THREE.DirectionalLight(0xffffff, 0.5);
    leftLight.position.set(-10, 0, 0);
    scene.add(leftLight);
    
    // Create a large sphere to act as the environment
    const geometry = new THREE.SphereGeometry(100, 32, 32);
    const material = new THREE.MeshBasicMaterial({
        color: 0xffffff,
        side: THREE.BackSide,
        fog: false
    });
    
    // Create a gradient material for the background
    const vertexShader = `
        varying vec3 vWorldPosition;
        void main() {
            vec4 worldPosition = modelMatrix * vec4(position, 1.0);
            vWorldPosition = worldPosition.xyz;
            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
        }
    `;
    
    const fragmentShader = `
        varying vec3 vWorldPosition;
        void main() {
            vec3 topColor = vec3(0.8, 0.8, 0.9); // Light blue-gray
            vec3 bottomColor = vec3(0.3, 0.3, 0.4); // Dark blue-gray
            float h = normalize(vWorldPosition).y;
            gl_FragColor = vec4(mix(bottomColor, topColor, max(0.0, h)), 1.0);
        }
    `;
    
    const gradientMaterial = new THREE.ShaderMaterial({
        vertexShader: vertexShader,
        fragmentShader: fragmentShader,
        side: THREE.BackSide
    });
    
    const sphere = new THREE.Mesh(geometry, gradientMaterial);
    scene.add(sphere);
    
    return scene;
}

// Update environment map loading
async function loadEnvironmentMap() {
    try {
        // Create default environment map
        const envMap = createDefaultEnvironment();
        scene.environment = envMap;
        scene.background = new THREE.Color(0xf0f0f0);
        
        // Update material presets with environment map
        Object.values(materialPresets).forEach(material => {
            material.envMap = envMap;
            material.needsUpdate = true;
        });
    } catch (error) {
        console.warn('Failed to create environment map:', error);
    }
}

// Add setupLights function that was referenced but not defined
function setupLights() {
    // Ambient light - increased for better overall illumination
    ambientLight = new THREE.AmbientLight(0xffffff, 0.4); // Increased from 0.2
    scene.add(ambientLight);
    
    // Key light - main directional light from front-top-right
    directionalLight = new THREE.DirectionalLight(0xffffff, 0.7); // Increased from 0.5
    directionalLight.position.set(5, 5, 5);
    directionalLight.castShadow = true;
    directionalLight.shadow.mapSize.width = 2048;
    directionalLight.shadow.mapSize.height = 2048;
    directionalLight.shadow.camera.near = 0.1;
    directionalLight.shadow.camera.far = 500;
    directionalLight.shadow.bias = -0.0001;
    scene.add(directionalLight);
    
    // Fill light - softer light from opposite side
    const fillLight = new THREE.DirectionalLight(0xfffaf0, 0.5); // Increased from 0.3
    fillLight.position.set(-5, 3, -2);
    scene.add(fillLight);
    
    // Rim light - from behind to highlight edges
    const rimLight = new THREE.DirectionalLight(0xf0f8ff, 0.3); // Increased from 0.2
    rimLight.position.set(0, -5, -5);
    scene.add(rimLight);
    
    // Update sliders to match light intensities
    const ambientSlider = document.getElementById('ambient-light');
    if (ambientSlider) ambientSlider.value = ambientLight.intensity;
    
    const directionalSlider = document.getElementById('directional-light');
    if (directionalSlider) directionalSlider.value = directionalLight.intensity;
}

// Add setupControls function that was referenced but not defined
function setupControls() {
    // Create camera controls
    controls = new OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true;
    controls.dampingFactor = 0.1;
    controls.rotateSpeed = 0.5;
    controls.minDistance = 1;
    controls.maxDistance = 1000;
    controls.autoRotate = false;
    controls.autoRotateSpeed = 0.5;
    controls.target.set(0, 0, 0);
    controls.saveState();

    // Handle window resize
    window.addEventListener('resize', onWindowResize, false);
}

function onWindowResize() {
    // Update camera aspect ratio and projection matrix
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    
    // Update renderer size
    renderer.setSize(window.innerWidth, window.innerHeight);
    
    // Update composer if it exists
    if (window.composer) {
        composer.setSize(window.innerWidth, window.innerHeight);
    }
}

// Show error message function
function showErrorMessage(message) {
    // Create error message element
    const errorDiv = document.createElement('div');
    errorDiv.className = 'error-message';
    errorDiv.innerHTML = `
        <div class="error-content">
            <i class="fas fa-exclamation-triangle"></i>
            <h3>Error</h3>
            <p>${message}</p>
            <button id="error-close">OK</button>
        </div>
    `;
    
    document.body.appendChild(errorDiv);
    
    // Add event listener to close button
    const closeBtn = document.getElementById('error-close');
    if (closeBtn) {
        closeBtn.addEventListener('click', () => {
            document.body.removeChild(errorDiv);
        });
    }
    
    // Auto-remove after 10 seconds
    setTimeout(() => {
        if (document.body.contains(errorDiv)) {
            document.body.removeChild(errorDiv);
        }
    }, 10000);
}

// Add improved wheel zoom handler to make zooming more precise
function onWheel(event) {
    // Prevent the default scroll behavior
    event.preventDefault();
    
    if (!controls) return;
    
    // Calculate zoom factor based on wheel delta
    const zoomFactor = 0.05;
    const delta = -Math.sign(event.deltaY) * zoomFactor;
    
    // Get current distance to target
    const distance = camera.position.distanceTo(controls.target);
    
    // Calculate new distance with exponential scaling for smoother zoom
    const newDistance = distance * (1 - delta);
    
    // Clamp to min/max distance
    const clampedDistance = THREE.MathUtils.clamp(
        newDistance,
        controls.minDistance,
        controls.maxDistance
    );
    
    // Only apply zoom if the distance is changing
    if (clampedDistance !== distance) {
        // Save camera up vector to prevent auto reorientation
        const upVector = camera.up.clone();
        
        // Apply the zoom by scaling the camera position
        const direction = camera.position.clone().sub(controls.target).normalize();
        camera.position.copy(controls.target).add(direction.multiplyScalar(clampedDistance));
        
        // Restore up vector to prevent camera roll
        camera.up.copy(upVector);
        
        controls.update();
    }
}

// Using existing validateGeometry and fixGeometryBounds functions defined earlier

// Helper function to check if a bounding box is valid
function isValidBoundingBox(box) {
    // Check if the bounding box has valid dimensions
    return (
        !isNaN(box.min.x) && !isNaN(box.min.y) && !isNaN(box.min.z) &&
        !isNaN(box.max.x) && !isNaN(box.max.y) && !isNaN(box.max.z) &&
        isFinite(box.min.x) && isFinite(box.min.y) && isFinite(box.min.z) &&
        isFinite(box.max.x) && isFinite(box.max.y) && isFinite(box.max.z) &&
        box.max.x >= box.min.x && box.max.y >= box.min.y && box.max.z >= box.min.z
    );
}

// Helper function to extract filename from path
function getFileNameFromPath(path) {
    if (!path) return "Unknown Model";
    
    // Handle both file objects and path strings
    if (typeof path === 'object' && path.name) {
        return path.name;
    }
    
    // Handle path strings
    if (typeof path === 'string') {
        // Remove query parameters if any
        const pathWithoutQuery = path.split('?')[0];
        
        // Split by forward slash or backslash and get the last element
        const parts = pathWithoutQuery.split(/[\/\\]/);
        return parts[parts.length - 1];
    }
    
    return "Unknown Model";
}

// Helper function to get a model's mesh regardless of structure
function getModelMesh(model) {
    if (!model) return null;
    
    // Support both legacy 'mesh' and newer 'object' references
    return model.object || model.mesh || null;
}

// Function to clear the scene (lowercase version for process3DMFile)
function clearScene() {
    // Just call the original ClearScene function
    ClearScene();
}

// Function to fit camera to a collection of objects
function fitCameraToObject(sceneToFit, objects, offset = 1.25) {
    // Create a bounding box for all objects
    const boundingBox = new THREE.Box3();
    
    // Handle both arrays and individual objects
    const objectsToFit = Array.isArray(objects) ? objects : [objects];
    
    // Add each object to the bounding box
    for (const object of objectsToFit) {
        if (object) {
            // Make sure world matrix is updated
            object.updateMatrixWorld(true);
            
            // Create a temporary box for this object
            const tempBox = new THREE.Box3().setFromObject(object);
            
            // Skip invalid boxes
            if (tempBox.isEmpty() || 
                !isFinite(tempBox.min.x) || !isFinite(tempBox.min.y) || !isFinite(tempBox.min.z) ||
                !isFinite(tempBox.max.x) || !isFinite(tempBox.max.y) || !isFinite(tempBox.max.z)) {
                continue;
            }
            
            // Expand the main box
            boundingBox.union(tempBox);
        }
    }
    
    // If the box is still empty or invalid, return
    if (boundingBox.isEmpty() || 
        !isFinite(boundingBox.min.x) || !isFinite(boundingBox.min.y) || !isFinite(boundingBox.min.z) ||
        !isFinite(boundingBox.max.x) || !isFinite(boundingBox.max.y) || !isFinite(boundingBox.max.z)) {
        console.warn('Invalid bounding box, cannot fit camera');
        return;
    }
    
    // Get the bounding sphere
    const center = boundingBox.getCenter(new THREE.Vector3());
    const size = boundingBox.getSize(new THREE.Vector3());
    const maxDim = Math.max(size.x, size.y, size.z);
    const fov = camera.fov * (Math.PI / 180);
    
    // Calculate optimal camera distance
    let cameraDistance = (maxDim / 2) / Math.tan(fov / 2);
    cameraDistance *= offset; // Add some padding
    
    // Position camera
    const direction = new THREE.Vector3(1, 0.7, 1).normalize();
    camera.position.copy(center).add(direction.multiplyScalar(cameraDistance));
    camera.lookAt(center);
    
    // Update controls
    if (controls) {
        controls.target.copy(center);
        controls.update();
    }
}

// Function to validate mesh geometry
function validateMeshGeometry(geometry) {
    // Basic validation check for geometry
    if (!geometry) return false;
    
    // Check for position attribute
    if (!geometry.attributes || !geometry.attributes.position) return false;
    
    // Check that we have at least some vertices
    const positionArray = geometry.attributes.position.array;
    return positionArray && positionArray.length > 0;
}

// Converts Rhino mesh to THREE.js BufferGeometry
function rhinoMeshToThreeGeometry(rhinoMesh) {
    if (!rhinoMesh) return null;
    
    try {
        // Extract vertices
        const vertices = [];
        const vertexCount = rhinoMesh.vertices().count;
        
        for (let i = 0; i < vertexCount; i++) {
            const pt = rhinoMesh.vertices().get(i);
            vertices.push(pt.x, pt.y, pt.z);
        }
        
        // Extract faces
        const indices = [];
        const faceCount = rhinoMesh.faces().count;
        
        for (let i = 0; i < faceCount; i++) {
            const face = rhinoMesh.faces().get(i);
            indices.push(face.a, face.b, face.c);
        }
        
        // Create geometry
        const geometry = new THREE.BufferGeometry();
        geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));
        geometry.setIndex(indices);
        geometry.computeVertexNormals();
        
        return geometry;
    } catch (error) {
        console.error('Error converting Rhino mesh to THREE geometry:', error);
        return null;
    }
}

// Process 3DM file - using the simplified version from our last update
async function process3DMFile(buffer) {
    try {
        showLoadingIndicator();
        
        // Check if rhino3dm is loaded
        if (!window.rhino3dm) {
            await waitForRhino3dm();
        }
        
        // Clear the scene before adding new objects
        clearScene();
        
        // Decode 3DM file
        const rhino = window.rhino3dm;
        const doc = rhino.File3dm.fromByteArray(buffer);
        
        // Get all the objects from the 3DM file
        const objects = doc.objects();
        const entries = objects.count;
        
        // Collection to hold all created meshes
        let allMeshes = [];
        
        // Process each object
        for (let i = 0; i < entries; i++) {
            try {
                const rhinoObject = objects.get(i);
                const geometry = rhinoObject.geometry();
                const attributes = rhinoObject.attributes();
                
                if (!geometry) continue;
                
                // Handle different geometry types
                let threeMesh = null;
                
                if (geometry.objectType === rhino.ObjectType.Mesh) {
                    // Process Rhino mesh
                    const rhinoMesh = geometry;
                    const threeGeometry = rhinoMeshToThreeGeometry(rhinoMesh);
                    
                    if (validateMeshGeometry(threeGeometry)) {
                        const material = createMeshMaterial();
                        threeMesh = new THREE.Mesh(threeGeometry, material);
                    }
                    
                    // Dispose of Rhino resources
                    rhinoMesh.delete();
                } 
                else if (geometry.objectType === rhino.ObjectType.Brep) {
                    // Convert Brep to mesh
                    const meshingParameters = getMeshingParameters(rhino);
                    const rhinoMesh = geometry.getMesh(meshingParameters);
                    
                    if (rhinoMesh) {
                        const threeGeometry = rhinoMeshToThreeGeometry(rhinoMesh);
                        
                        if (validateMeshGeometry(threeGeometry)) {
                            const material = createMeshMaterial();
                            threeMesh = new THREE.Mesh(threeGeometry, material);
                        }
                        
                        // Dispose of Rhino resources
                        rhinoMesh.delete();
                    }
                } 
                else if (geometry.objectType === rhino.ObjectType.Surface) {
                    // Convert Surface to mesh
                    const meshingParameters = getMeshingParameters(rhino);
                    const rhinoMesh = geometry.getMesh(meshingParameters);
                    
                    if (rhinoMesh) {
                        const threeGeometry = rhinoMeshToThreeGeometry(rhinoMesh);
                        
                        if (validateMeshGeometry(threeGeometry)) {
                            const material = createMeshMaterial();
                            threeMesh = new THREE.Mesh(threeGeometry, material);
                        }
                        
                        // Dispose of Rhino resources
                        rhinoMesh.delete();
                    }
                }
                
                // If a mesh was created, add it to the collection
                if (threeMesh) {
                    allMeshes.push(threeMesh);
                    scene.add(threeMesh);
                }
                
                // Dispose of Rhino resources
                geometry.delete();
                attributes.delete();
                rhinoObject.delete();
                
            } catch (objError) {
                console.error("Error processing 3DM object:", objError);
            }
        }
        
        // Focus camera on all loaded meshes
        if (allMeshes.length > 0) {
            fitCameraToObject(scene, allMeshes);
        }
        
        // Clean up Rhino resources
        objects.delete();
        doc.delete();
        
        hideLoadingIndicator();
        return allMeshes; // Return the array of meshes instead of true
    } catch (error) {
        console.error("Error processing 3DM file:", error);
        hideLoadingIndicator();
        showErrorMessage("Failed to process 3DM file. " + error.message);
        return []; // Return empty array on error
    }
}

// The waitForRhino3dm function is already defined at line 240
// Removed line: // Function removed to avoid duplicate declaration
// Removed line:     return new Promise((resolve, reject) => {
// Removed line:         const maxAttempts = 20;
// Removed line:         let attempts = 0;
// Removed line:         
// Removed line:         const checkRhino = () => {
// Removed line:             attempts++;
// Removed line:             if (window.rhino3dm) {
// Removed line:                 resolve();
// Removed line:             } else if (attempts >= maxAttempts) {
// Removed line:                 reject(new Error("Failed to load rhino3dm after multiple attempts"));
// Removed line:             } else {
// Removed line:                 setTimeout(checkRhino, 500);
// Removed line:             }
// Removed line:         };
// Removed line:         
// Removed line:         checkRhino();
// Removed line:     });
// End of removed duplicate function

// REMOVED: Duplicate clearScene function - already defined at line 1994

// REMOVED: Duplicate rhinoMeshToThreeGeometry function - already defined at line 2071

// Helper function to create material for meshes
function createMeshMaterial() {
    return new THREE.MeshPhongMaterial({
        color: 0xcccccc,
        specular: 0x111111,
        shininess: 100,
        flatShading: false
    });
}

// Helper function to validate mesh geometry
function validateMeshGeometry(geometry) {
    return geometry && 
           geometry.attributes && 
           geometry.attributes.position && 
           geometry.attributes.position.count > 0;
}

// Helper function to get meshing parameters for Rhino
function getMeshingParameters(rhino) {
    const mp = new rhino.MeshingParameters();
    mp.gridMaxCount = 64;
    mp.gridAmplification = 1.0;
    mp.gridAngle = 0.0;
    mp.gridAspectRatio = 1.0;
    mp.refineAngle = 15;
    mp.refineGrid = true;
    mp.simplePlanes = false;
    return mp;
}

// Helper function to fit camera to objects
function fitCameraToObject(scene, objects) {
    const box = new THREE.Box3();
    
    // If objects is an array, compute the bounding box for all objects
    if (Array.isArray(objects)) {
        objects.forEach(object => {
            box.expandByObject(object);
        });
    } else {
        // Single object
        box.expandByObject(objects);
    }
    
    const center = new THREE.Vector3();
    box.getCenter(center);
    
    // Get the size of the bounding box
    const size = new THREE.Vector3();
    box.getSize(size);
    
    // Calculate the distance based on the size
    const maxDim = Math.max(size.x, size.y, size.z);
    const fov = camera.fov * (Math.PI / 180);
    let cameraDistance = Math.abs(maxDim / Math.sin(fov / 2));
    
    // Add a little padding
    cameraDistance *= 1.5;
    
    // Set the camera position and look at the center
    camera.position.set(center.x, center.y, center.z + cameraDistance);
    camera.lookAt(center);
    camera.updateProjectionMatrix();
    
    // Update controls to center on the objects
    controls.target.copy(center);
    controls.update();
}

// Animation loop function
function animate() {
    requestAnimationFrame(animate);
    
    // Update controls
    if (controls) {
        controls.update();
    }
    
    // Render the scene with composer for post-processing effects
    if (composer) {
        composer.render();
    } else if (renderer && scene && camera) {
        // Fallback to regular renderer if composer is not available
        renderer.render(scene, camera);
    }
}

// Initialize the application when the DOM content is loaded
document.addEventListener('DOMContentLoaded', async () => {
    // Show loading indicator
    const loadingIndicator = document.getElementById('loading-indicator');
    if (loadingIndicator) {
        loadingIndicator.style.display = 'flex';
    }
    
    try {
        // Initialize the application
        await initializeApp();
        
        // Hide loading indicator
        if (loadingIndicator) {
            loadingIndicator.style.display = 'none';
        }
    } catch (error) {
        console.error('Error during initialization:', error);
        // Hide loading indicator even if there's an error
        if (loadingIndicator) {
            loadingIndicator.style.display = 'none';
        }
        // Show error message
        alert('Error initializing the application: ' + error.message);
    }
});


